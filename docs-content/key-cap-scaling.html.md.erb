---
title: Key Capacity Scaling Indicators
owner: PCF Metrics Platform Monitoring
---

This topic describes key capacity scaling indicators that operators monitor to determine when
they need to scale their Pivotal Cloud Foundry (PCF) deployments.

Pivotal provides these indicators to operators as general guidance for capacity scaling. 
Each indicator is based on platform metrics from different components. 
This guidance is applicable to most PCF v1.10 deployments.
Pivotal recommends that operators fine-tune the suggested alert thresholds 
by observing historical trends for their deployments. 

##<a id="cell"></a>Diego Cell Capacity Scaling Indicators

Currently, there are three key capacity scaling indicators recommended for Diego cell:

+ [Diego Cell Memory Capacity](#cell-memory) is a measure of the percentage of remaining memory capacity
+ [Diego Cell Disk Capacity](#cell-disk) is a measure of the percentage of remaining disk capacity
+ [Diego Cell Container Capacity](#cell-container) is a measure of the percentage of remaining container capacity

###<a id="cell-memory"></a>Diego Cell Memory Capacity

<table>
   <tr><th colspan="2" style="text-align: center;"><br>rep.CapacityRemainingMemory / rep.CapacityTotalMemory<br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
     <td> Percentage of remaining memory capacity for a given cell. Monitor this derived metric across all cells in a deployment.
<br><br>
      The metric <code>rep.CapacityRemainingMemory</code> indicates the remaining amount in MiB of memory available for this cell to allocate to containers.<br>
      The metric <code>rep.CapacityTotalMemory</code> indicates the total amount in MiB of memory available for this cell to allocate to containers.</td>
 </tr>
   <tr>
      <th>Purpose</th>
      <td>A best practice deployment of Cloud Foundry includes three availability zones (AZs).  
          For these types of deployments, Pivotal recommends that you have enough capacity to suffer failure of an entire AZ.
          <br><br>
          The <em>Recommended threshold</em> assumes a three AZ configuration. Adjust the threshold percentage if you have more or less AZs. 
      </td>
   </tr>
   <tr>
      <th>Recommended thresholds</th>
      <td>&lt; avg(30%)</td>
   </tr>
   <tr>
      <th>How to scale</th>
      <td>      
      Scale up your Diego Cells 
      </td>
   </tr>
    <tr>
      <th>Additional Details</th>
      <td> <strong>Origin</strong>: Doppler/Firehose<br>
           <strong>Type</strong>: Gauge (%)<br>
           <strong>Frequency</strong>: Emitted every 60 s<br>
           <strong>Applies to</strong>: cf:diego_cells
      </td>
   </tr>
</table>

###<a id="cell-disk"></a>Diego Cell Disk Capacity

<table>
   <tr><th colspan="2" style="text-align: center;"><br>rep.CapacityRemainingDisk / rep.CapacityTotalDisk<br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td> Percentage of remaining disk capacity for a given cell. Monitor this derived metric across all cells in a deployment.
<br><br>
      The metric <code>rep.CapacityRemainingDisk</code> indicates the remaining amount in MiB of disk available for this cell to allocate to containers.<br> 
      The metric <code>rep.CapacityTotalDisk</code> indicates the total amount in MiB of disk available for this cell to allocate to containers.</td>
 </tr>
   <tr>
       <th>Purpose</th>
      <td>A best practice deployment of Cloud Foundry includes three availability zones (AZs).  
          For these types of deployments, Pivotal recommends that you have enough capacity to suffer failure of an entire AZ.
          <br><br>
          The <em>Recommended threshold</em> assumes a three AZ configuration. Adjust the threshold percentage if you have more or less AZs.
      </td>
   </tr>
   <tr>
      <th>Recommended thresholds</th>
      <td>&lt; avg(30%)</td>
   </tr>
   <tr>
      <th>How to Scale</th>
      <td>      
      Scale up your Diego Cells 
      </td>
   </tr>
    <tr>
      <th>Additional Details</th>
      <td> <strong>Origin</strong>: Doppler/Firehose<br>
           <strong>Type</strong>: Gauge (%)<br>
           <strong>Frequency</strong>: Emitted every 60 s<br>
           <strong>Applies to</strong>: cf:diego_cells
      </td>
   </tr>
</table>

###<a id="cell-container"></a>Diego Cell Container Capacity

<table>
   <tr><th colspan="2" style="text-align: center;"><br>rep.CapacityRemainingContainers / 
       rep.CapacityTotalContainers<br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td> Percentage of remaining container capacity for a given cell. Monitor this derived metric across all cells in a deployment.
      <br><br>
      The metric <code>rep.CapacityRemainingContainers</code> indicates the remaining number of containers this cell can host.<br>
      The metric  by <code>rep.CapacityTotalContainer</code> indicates the total number of containers this cell can host.</td>
   <tr>
      <th>Purpose</th>
      <td>A best practice deployment of Cloud Foundry includes three availability zones (AZs).  
          For these types of deployments, Pivotal recommends that you have enough capacity to suffer failure of an entire AZ.
          <br><br>
          The <em>Recommended threshold</em> assumes a three AZ configuration. Adjust the threshold percentage if you have more or less AZs.
      </td>
   </tr>
   <tr>
      <th>Recommended thresholds</th>
      <td>&lt; avg(30%)</td>
   </tr>
   <tr>
      <th>How to scale</th>
      <td>
      Scale up your Diego Cells 
     </td>
   </tr>
    <tr>
      <th>Additional Details</th>
      <td> <strong>Origin</strong>: Doppler/Firehose<br>
           <strong>Type</strong>: Gauge (%)<br>
           <strong>Frequency</strong>: Emitted every 60 s<br>
           <strong>Applies to</strong>: cf:diego_cells
      </td>
   </tr>
</table>

## <a id="doppler-server"></a> Firehose Performance Scaling Indicator
Currently, there is one key capacity scaling indicator recommended for Firehose performance. 

### <a id="firehose-loss-rate"></a> Firehose Loss Rate

<table>
  <tr>
      <th colspan="2" style="text-align: center;">((DopplerServer.TruncatingBuffer.totalDroppedMessages + 
          DopplerServer.doppler.shedEnvelopes) / DopplerServer.listeners.totalReceivedMessageCount)</th>
  </tr>
   <tr>
      <th width="25">Description</th>
      <td> This derived value represents the firehose loss rate, or the total messages dropped as a percentage of the total message throughput
       </td>
   </tr>
   <tr>
      <th>Purpose</th>
      <td>Excessive dropped messages can indicate the Dopplers are not processing messages fast enough.
        <br><br>
        The recommended scaling indicator is to look at the total dropped as a percentage of the total throughput and scale if the derived loss rate value grows greater than <code>0.1</code>.
   </tr>
   <tr>
      <th>Recommended thresholds</th>
      <td><strong>Scale indicator</strong>: &ge; 0.1</br>
      If alerting:<br>
      <strong>Yellow warning</strong>: &ge; 0.05<br>
      <strong>Red critical</strong>: &ge; 0.1</td>
   </tr>
   <tr>
      <th>How to scale up</th>
      <td>Scale up the Firehose log receiver and Dopplers. 
      </td>
   </tr>
   <tr>
      <th>Additional Details</th>
      <td> <strong>Origin</strong>: Doppler/Firehose<br>
           <strong>Type</strong>: Gauge (float)<br>
           <strong>Frequency</strong>: Base metrics are emitted every 5 s<br>
           <strong>Applies to</strong>: cf:doppler<br>
      </td>
   </tr>
</table>

(Amber) We have a known issue with the Dropped Messages metric that is impacting the ability to publish this derived value suggestion. Working with Loggregator team to resolve

## <a id="Router"></a> Router Performance Scaling Indicator
Currently, there is one key capacity scaling indicator recommended for Router performance. 

###<a id="system.cpu.user"></a>Router VM CPU Utilization

<table>
  <tr>
      <th colspan="2" style="text-align: center;">system.cpu.user of Gorouter VM(s)</th>
  </tr>
  <tr>
      <th>Description</th>
      <td>CPU utilization of the Gorouter VM(s)</td>
  </tr>
  <tr>
      <th>Purpose</th>
      <td>High CPU utilization of the Gorouter VMs can increase latency and cause throughput, or requests per/second, to level-off. Pivotal recommends keeping the CPU utilization within a maximum range of 60-70%  for best Gorouter performance. 
      <br><br>
      If you want to increase throughput capabilities while also keeping latency low, Pivotal recommends scaling the Gorouter while continuing to ensure that CPU utilization does not exceed the maximum recommended  range. 
          </td>
   </tr>
   <tr>
      <th>Recommended thresholds</th>
      <td><strong>Scale indicator</strong>: &ge; 60%<br>
      If alerting:<br>
      <strong>Yellow warning</strong>: &ge; 60%<br>
      <strong>Red critical</strong>: &ge; 70%<br>
      </td>
   </tr>
   <tr>
      <th>How to scale</th>
      <td>Resolve high utilization by scaling the Gorouters horizontally or vertically (the <b>Router</b> VM in the <b>Resource Config</b> pane of the Elastic Runtime tile). 
      </td>
   </tr>
   <tr>
      <th>Additional Details</th>
      <td> <strong>Origin</strong>: JMX Bridge or BOSH HM Forwarder<br>
           <strong>Type</strong>: Gauge (float)<br>
           <strong>Frequency</strong>: Emitted every 60 s<br>
           <strong>Applies to</strong>: cf:router<br>
      </td>
   </tr>
</table>

##<a id="systemdiskpersist"></a>NFS/WebDAV Backed Blobstore

<p class="note"><strong>Note</strong>: This metric is only relevant if your deployment does not use an external S3 repository for external storage with no capacity constraints</p>

<table>
   <tr><th colspan="2" style="text-align: center;"><br>system.disk.persistent.percent of NFS server VM(s)<br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td><em>If applicable</em>: Monitor the percentage of persistent disk used on the VM for the NFS Server job.
           </tr>
   <tr>
       <th>Purpose</th>
       <td>If you do not use an external S3 repository for external storage with no capacity constraints, you must monitor the PCF object store to push new app and buildpacks.
     <br><br>
     If you use an internal NFS/WebDAV backed blobstore, consider scaling the persistent disk when it reaches 75% capacity.
     </td>
   </tr>
   <tr>
      <th>Recommended thresholds</th>
      <td>&ge; 75%</td>
   </tr>
   <tr>
      <th>How to scale</th>
      <td>
      Give your NFS Server additional persistent disk resources.  
      </td>
   </tr>
    <tr>
      <th>Additional Details</th>
      <td> <strong>Origin</strong>: JMX Bridge or BOSH HM Forwarder<br>
           <strong>Type</strong>: Gauge (%)<br>
           <strong>Applies to</strong>: cf:nfs_server<br>
      </td>
   </tr>  
</table>
